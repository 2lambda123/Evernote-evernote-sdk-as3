/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.type.Note;
import com.evernote.edam.type.Notebook;
import com.evernote.edam.type.Tag;
import com.evernote.edam.type.NotebookDescriptor;

  /**
   * The result of calling findRelated().  The contents of the notes,
   * notebooks, and tags fields will be in decreasing order of expected
   * relevance.  It is possible that fewer results than requested will be
   * returned even if there are enough distinct entities in the account
   * in cases where the relevance is estimated to be low.
   * 
   * <dl>
   * <dt>notes</dt>
   * <dd>If notes have been requested to be included, this will be the
   *     list of notes.</dd>
   * 
   * <dt>notebooks</dt>
   * <dd>If notebooks have been requested to be included, this will be the
   *     list of notebooks.</dd>
   * 
   * <dt>tags</dt>
   * <dd>If tags have been requested to be included, this will be the list
   *     of tags.</dd>
   * </dl>
   * 
   * <dt>containingNotebooks</dt>
   * <dd>If <code>includeContainingNotebooks</code> is set to <code>true</code>
   *     in the RelatedResultSpec, return the list of notebooks to
   *     to which the returned related notes belong. The notebooks in this
   *     list will occur once per notebook GUID and are represented as
   *     NotebookDescriptor objects.</dd>
   * </dl>
   * 
   * <dt>debugInfo</dt>
   * <dd>NOTE: This should be excluded from the public API.<br /><br />
   *     If <code>includeDebugInfo</code> in RelatedResultSpec is set to
   *     <code>true</code>, this field may contain debug information
   *     if the service decides to do so.</dd>
   * </dl>
   */
  public class RelatedResult implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("RelatedResult");
    private static const NOTES_FIELD_DESC:TField = new TField("notes", TType.LIST, 1);
    private static const NOTEBOOKS_FIELD_DESC:TField = new TField("notebooks", TType.LIST, 2);
    private static const TAGS_FIELD_DESC:TField = new TField("tags", TType.LIST, 3);
    private static const CONTAINING_NOTEBOOKS_FIELD_DESC:TField = new TField("containingNotebooks", TType.LIST, 4);
    private static const DEBUG_INFO_FIELD_DESC:TField = new TField("debugInfo", TType.STRING, 5);

    private var _notes:Array;
    public static const NOTES:int = 1;
    private var _notebooks:Array;
    public static const NOTEBOOKS:int = 2;
    private var _tags:Array;
    public static const TAGS:int = 3;
    private var _containingNotebooks:Array;
    public static const CONTAININGNOTEBOOKS:int = 4;
    private var _debugInfo:String;
    public static const DEBUGINFO:int = 5;


    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[NOTES] = new FieldMetaData("notes", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Note)));
      metaDataMap[NOTEBOOKS] = new FieldMetaData("notebooks", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Notebook)));
      metaDataMap[TAGS] = new FieldMetaData("tags", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Tag)));
      metaDataMap[CONTAININGNOTEBOOKS] = new FieldMetaData("containingNotebooks", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, NotebookDescriptor)));
      metaDataMap[DEBUGINFO] = new FieldMetaData("debugInfo", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(RelatedResult, metaDataMap);
    }

    public function RelatedResult() {
    }

    public function get notes():Array {
      return this._notes;
    }

    public function set notes(notes:Array):void {
      this._notes = notes;
    }

    public function unsetNotes():void {
      this.notes = null;
    }

    // Returns true if field notes is set (has been assigned a value) and false otherwise
    public function isSetNotes():Boolean {
      return this.notes != null;
    }

    public function get notebooks():Array {
      return this._notebooks;
    }

    public function set notebooks(notebooks:Array):void {
      this._notebooks = notebooks;
    }

    public function unsetNotebooks():void {
      this.notebooks = null;
    }

    // Returns true if field notebooks is set (has been assigned a value) and false otherwise
    public function isSetNotebooks():Boolean {
      return this.notebooks != null;
    }

    public function get tags():Array {
      return this._tags;
    }

    public function set tags(tags:Array):void {
      this._tags = tags;
    }

    public function unsetTags():void {
      this.tags = null;
    }

    // Returns true if field tags is set (has been assigned a value) and false otherwise
    public function isSetTags():Boolean {
      return this.tags != null;
    }

    public function get containingNotebooks():Array {
      return this._containingNotebooks;
    }

    public function set containingNotebooks(containingNotebooks:Array):void {
      this._containingNotebooks = containingNotebooks;
    }

    public function unsetContainingNotebooks():void {
      this.containingNotebooks = null;
    }

    // Returns true if field containingNotebooks is set (has been assigned a value) and false otherwise
    public function isSetContainingNotebooks():Boolean {
      return this.containingNotebooks != null;
    }

    public function get debugInfo():String {
      return this._debugInfo;
    }

    public function set debugInfo(debugInfo:String):void {
      this._debugInfo = debugInfo;
    }

    public function unsetDebugInfo():void {
      this.debugInfo = null;
    }

    // Returns true if field debugInfo is set (has been assigned a value) and false otherwise
    public function isSetDebugInfo():Boolean {
      return this.debugInfo != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case NOTES:
        if (value == null) {
          unsetNotes();
        } else {
          this.notes = value;
        }
        break;

      case NOTEBOOKS:
        if (value == null) {
          unsetNotebooks();
        } else {
          this.notebooks = value;
        }
        break;

      case TAGS:
        if (value == null) {
          unsetTags();
        } else {
          this.tags = value;
        }
        break;

      case CONTAININGNOTEBOOKS:
        if (value == null) {
          unsetContainingNotebooks();
        } else {
          this.containingNotebooks = value;
        }
        break;

      case DEBUGINFO:
        if (value == null) {
          unsetDebugInfo();
        } else {
          this.debugInfo = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case NOTES:
        return this.notes;
      case NOTEBOOKS:
        return this.notebooks;
      case TAGS:
        return this.tags;
      case CONTAININGNOTEBOOKS:
        return this.containingNotebooks;
      case DEBUGINFO:
        return this.debugInfo;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case NOTES:
        return isSetNotes();
      case NOTEBOOKS:
        return isSetNotebooks();
      case TAGS:
        return isSetTags();
      case CONTAININGNOTEBOOKS:
        return isSetContainingNotebooks();
      case DEBUGINFO:
        return isSetDebugInfo();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NOTES:
            if (field.type == TType.LIST) {
              {
                var _list192:TList = iprot.readListBegin();
                this.notes = new Array();
                for (var _i193:int = 0; _i193 < _list192.size; ++_i193)
                {
                  var _elem194:Note;
                  _elem194 = new Note();
                  _elem194.read(iprot);
                  this.notes.push(_elem194);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOTEBOOKS:
            if (field.type == TType.LIST) {
              {
                var _list195:TList = iprot.readListBegin();
                this.notebooks = new Array();
                for (var _i196:int = 0; _i196 < _list195.size; ++_i196)
                {
                  var _elem197:Notebook;
                  _elem197 = new Notebook();
                  _elem197.read(iprot);
                  this.notebooks.push(_elem197);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TAGS:
            if (field.type == TType.LIST) {
              {
                var _list198:TList = iprot.readListBegin();
                this.tags = new Array();
                for (var _i199:int = 0; _i199 < _list198.size; ++_i199)
                {
                  var _elem200:Tag;
                  _elem200 = new Tag();
                  _elem200.read(iprot);
                  this.tags.push(_elem200);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CONTAININGNOTEBOOKS:
            if (field.type == TType.LIST) {
              {
                var _list201:TList = iprot.readListBegin();
                this.containingNotebooks = new Array();
                for (var _i202:int = 0; _i202 < _list201.size; ++_i202)
                {
                  var _elem203:NotebookDescriptor;
                  _elem203 = new NotebookDescriptor();
                  _elem203.read(iprot);
                  this.containingNotebooks.push(_elem203);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEBUGINFO:
            if (field.type == TType.STRING) {
              this.debugInfo = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.notes != null) {
        if (isSetNotes()) {
          oprot.writeFieldBegin(NOTES_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.notes.length));
            for each (var elem204:* in this.notes)            {
              elem204.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (this.notebooks != null) {
        if (isSetNotebooks()) {
          oprot.writeFieldBegin(NOTEBOOKS_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.notebooks.length));
            for each (var elem205:* in this.notebooks)            {
              elem205.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (this.tags != null) {
        if (isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.tags.length));
            for each (var elem206:* in this.tags)            {
              elem206.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (this.containingNotebooks != null) {
        if (isSetContainingNotebooks()) {
          oprot.writeFieldBegin(CONTAINING_NOTEBOOKS_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.containingNotebooks.length));
            for each (var elem207:* in this.containingNotebooks)            {
              elem207.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (this.debugInfo != null) {
        if (isSetDebugInfo()) {
          oprot.writeFieldBegin(DEBUG_INFO_FIELD_DESC);
          oprot.writeString(this.debugInfo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("RelatedResult(");
      var first:Boolean = true;

      if (isSetNotes()) {
        ret += "notes:";
        if (this.notes == null) {
          ret += "null";
        } else {
          ret += this.notes;
        }
        first = false;
      }
      if (isSetNotebooks()) {
        if (!first) ret +=  ", ";
        ret += "notebooks:";
        if (this.notebooks == null) {
          ret += "null";
        } else {
          ret += this.notebooks;
        }
        first = false;
      }
      if (isSetTags()) {
        if (!first) ret +=  ", ";
        ret += "tags:";
        if (this.tags == null) {
          ret += "null";
        } else {
          ret += this.tags;
        }
        first = false;
      }
      if (isSetContainingNotebooks()) {
        if (!first) ret +=  ", ";
        ret += "containingNotebooks:";
        if (this.containingNotebooks == null) {
          ret += "null";
        } else {
          ret += this.containingNotebooks;
        }
        first = false;
      }
      if (isSetDebugInfo()) {
        if (!first) ret +=  ", ";
        ret += "debugInfo:";
        if (this.debugInfo == null) {
          ret += "null";
        } else {
          ret += this.debugInfo;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
