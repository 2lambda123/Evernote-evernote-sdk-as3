/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.type.Note;
import com.evernote.edam.type.Notebook;
import com.evernote.edam.type.Tag;

  /**
   * The result of calling findRelated().  The contents of the notes,
   * notebooks, and tags fields will be in decreasing order of expected
   * relevance.  It is possible that fewer results than requested will be
   * returned even if there are enough distinct entities in the account
   * in cases where the relevance is estimated to be low.
   * 
   * <dl>
   * <dt>notes</dt>
   * <dd>If notes have been requested to be included, this will be the
   *     list of notes.</dd>
   * 
   * <dt>notebooks</dt>
   * <dd>If notebooks have been requested to be included, this will be the
   *     list of notebooks.</dd>
   * 
   * <dt>tags</dt>
   * <dd>If tags have been requested to be included, this will be the list
   *     of tags.</dd>
   * </dl>
   */
  public class RelatedResult implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("RelatedResult");
    private static const NOTES_FIELD_DESC:TField = new TField("notes", TType.LIST, 1);
    private static const NOTEBOOKS_FIELD_DESC:TField = new TField("notebooks", TType.LIST, 2);
    private static const TAGS_FIELD_DESC:TField = new TField("tags", TType.LIST, 3);

    private var _notes:Array;
    public static const NOTES:int = 1;
    private var _notebooks:Array;
    public static const NOTEBOOKS:int = 2;
    private var _tags:Array;
    public static const TAGS:int = 3;


    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[NOTES] = new FieldMetaData("notes", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Note)));
      metaDataMap[NOTEBOOKS] = new FieldMetaData("notebooks", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Notebook)));
      metaDataMap[TAGS] = new FieldMetaData("tags", TFieldRequirementType.OPTIONAL, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Tag)));
    }
    {
      FieldMetaData.addStructMetaDataMap(RelatedResult, metaDataMap);
    }

    public function RelatedResult() {
    }

    public function get notes():Array {
      return this._notes;
    }

    public function set notes(notes:Array):void {
      this._notes = notes;
    }

    public function unsetNotes():void {
      this.notes = null;
    }

    // Returns true if field notes is set (has been assigned a value) and false otherwise
    public function isSetNotes():Boolean {
      return this.notes != null;
    }

    public function get notebooks():Array {
      return this._notebooks;
    }

    public function set notebooks(notebooks:Array):void {
      this._notebooks = notebooks;
    }

    public function unsetNotebooks():void {
      this.notebooks = null;
    }

    // Returns true if field notebooks is set (has been assigned a value) and false otherwise
    public function isSetNotebooks():Boolean {
      return this.notebooks != null;
    }

    public function get tags():Array {
      return this._tags;
    }

    public function set tags(tags:Array):void {
      this._tags = tags;
    }

    public function unsetTags():void {
      this.tags = null;
    }

    // Returns true if field tags is set (has been assigned a value) and false otherwise
    public function isSetTags():Boolean {
      return this.tags != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case NOTES:
        if (value == null) {
          unsetNotes();
        } else {
          this.notes = value;
        }
        break;

      case NOTEBOOKS:
        if (value == null) {
          unsetNotebooks();
        } else {
          this.notebooks = value;
        }
        break;

      case TAGS:
        if (value == null) {
          unsetTags();
        } else {
          this.tags = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case NOTES:
        return this.notes;
      case NOTEBOOKS:
        return this.notebooks;
      case TAGS:
        return this.tags;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case NOTES:
        return isSetNotes();
      case NOTEBOOKS:
        return isSetNotebooks();
      case TAGS:
        return isSetTags();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NOTES:
            if (field.type == TType.LIST) {
              {
                var _list206:TList = iprot.readListBegin();
                this.notes = new Array();
                for (var _i207:int = 0; _i207 < _list206.size; ++_i207)
                {
                  var _elem208:Note;
                  _elem208 = new Note();
                  _elem208.read(iprot);
                  this.notes.push(_elem208);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOTEBOOKS:
            if (field.type == TType.LIST) {
              {
                var _list209:TList = iprot.readListBegin();
                this.notebooks = new Array();
                for (var _i210:int = 0; _i210 < _list209.size; ++_i210)
                {
                  var _elem211:Notebook;
                  _elem211 = new Notebook();
                  _elem211.read(iprot);
                  this.notebooks.push(_elem211);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TAGS:
            if (field.type == TType.LIST) {
              {
                var _list212:TList = iprot.readListBegin();
                this.tags = new Array();
                for (var _i213:int = 0; _i213 < _list212.size; ++_i213)
                {
                  var _elem214:Tag;
                  _elem214 = new Tag();
                  _elem214.read(iprot);
                  this.tags.push(_elem214);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.notes != null) {
        if (isSetNotes()) {
          oprot.writeFieldBegin(NOTES_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.notes.length));
            for each (var elem215:* in this.notes)            {
              elem215.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (this.notebooks != null) {
        if (isSetNotebooks()) {
          oprot.writeFieldBegin(NOTEBOOKS_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.notebooks.length));
            for each (var elem216:* in this.notebooks)            {
              elem216.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (this.tags != null) {
        if (isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.tags.length));
            for each (var elem217:* in this.tags)            {
              elem217.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("RelatedResult(");
      var first:Boolean = true;

      if (isSetNotes()) {
        ret += "notes:";
        if (this.notes == null) {
          ret += "null";
        } else {
          ret += this.notes;
        }
        first = false;
      }
      if (isSetNotebooks()) {
        if (!first) ret +=  ", ";
        ret += "notebooks:";
        if (this.notebooks == null) {
          ret += "null";
        } else {
          ret += this.notebooks;
        }
        first = false;
      }
      if (isSetTags()) {
        if (!first) ret +=  ", ";
        ret += "tags:";
        if (this.tags == null) {
          ret += "null";
        } else {
          ret += this.tags;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
