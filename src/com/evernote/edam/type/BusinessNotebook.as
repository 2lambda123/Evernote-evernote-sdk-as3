/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.type.SharedNotebookPrivilegeLevel;

  /**
   * If a Notebook contained in an Evernote Business account has been published
   * the to business library, the Notebook will have a reference to one of these
   * structures, which specifies how the Notebook will be represented in the
   * library.
   * 
   * <dl>
   * <dt>notebookDescription</dt>
   *   <dd>A short description of the notebook's content that will be displayed
   *       in the business library user interface. The description may not begin
   *       or end with whitespace.
   *   <br/>
   *   Length: EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MIN -
   *           EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MAX
   *   <br/>
   *   Regex:  EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_REGEX
   *   </dd>
   * 
   * <dt>privilege</dt>
   *   <dd>The privileges that will be granted to users who join the notebook through
   *       the business library.
   *   </dd>
   * 
   * <dt>recommended</dt>
   *   <dd>Whether the notebook should be "recommended" when displayed in the business
   *       library user interface.
   *   </dd>
   * </dl>
   */
  public class BusinessNotebook implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("BusinessNotebook");
    private static const NOTEBOOK_DESCRIPTION_FIELD_DESC:TField = new TField("notebookDescription", TType.STRING, 1);
    private static const PRIVILEGE_FIELD_DESC:TField = new TField("privilege", TType.I32, 2);
    private static const RECOMMENDED_FIELD_DESC:TField = new TField("recommended", TType.BOOL, 3);

    private var _notebookDescription:String;
    public static const NOTEBOOKDESCRIPTION:int = 1;
    private var _privilege:int;
    public static const PRIVILEGE:int = 2;
    private var _recommended:Boolean;
    public static const RECOMMENDED:int = 3;

    private var __isset_privilege:Boolean = false;
    private var __isset_recommended:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[NOTEBOOKDESCRIPTION] = new FieldMetaData("notebookDescription", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[PRIVILEGE] = new FieldMetaData("privilege", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[RECOMMENDED] = new FieldMetaData("recommended", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
    }
    {
      FieldMetaData.addStructMetaDataMap(BusinessNotebook, metaDataMap);
    }

    public function BusinessNotebook() {
    }

    public function get notebookDescription():String {
      return this._notebookDescription;
    }

    public function set notebookDescription(notebookDescription:String):void {
      this._notebookDescription = notebookDescription;
    }

    public function unsetNotebookDescription():void {
      this.notebookDescription = null;
    }

    // Returns true if field notebookDescription is set (has been assigned a value) and false otherwise
    public function isSetNotebookDescription():Boolean {
      return this.notebookDescription != null;
    }

    public function get privilege():int {
      return this._privilege;
    }

    public function set privilege(privilege:int):void {
      this._privilege = privilege;
      this.__isset_privilege = true;
    }

    public function unsetPrivilege():void {
      this.__isset_privilege = false;
    }

    // Returns true if field privilege is set (has been assigned a value) and false otherwise
    public function isSetPrivilege():Boolean {
      return this.__isset_privilege;
    }

    public function get recommended():Boolean {
      return this._recommended;
    }

    public function set recommended(recommended:Boolean):void {
      this._recommended = recommended;
      this.__isset_recommended = true;
    }

    public function unsetRecommended():void {
      this.__isset_recommended = false;
    }

    // Returns true if field recommended is set (has been assigned a value) and false otherwise
    public function isSetRecommended():Boolean {
      return this.__isset_recommended;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case NOTEBOOKDESCRIPTION:
        if (value == null) {
          unsetNotebookDescription();
        } else {
          this.notebookDescription = value;
        }
        break;

      case PRIVILEGE:
        if (value == null) {
          unsetPrivilege();
        } else {
          this.privilege = value;
        }
        break;

      case RECOMMENDED:
        if (value == null) {
          unsetRecommended();
        } else {
          this.recommended = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case NOTEBOOKDESCRIPTION:
        return this.notebookDescription;
      case PRIVILEGE:
        return this.privilege;
      case RECOMMENDED:
        return this.recommended;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case NOTEBOOKDESCRIPTION:
        return isSetNotebookDescription();
      case PRIVILEGE:
        return isSetPrivilege();
      case RECOMMENDED:
        return isSetRecommended();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NOTEBOOKDESCRIPTION:
            if (field.type == TType.STRING) {
              this.notebookDescription = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGE:
            if (field.type == TType.I32) {
              this.privilege = iprot.readI32();
              this.__isset_privilege = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case RECOMMENDED:
            if (field.type == TType.BOOL) {
              this.recommended = iprot.readBool();
              this.__isset_recommended = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.notebookDescription != null) {
        if (isSetNotebookDescription()) {
          oprot.writeFieldBegin(NOTEBOOK_DESCRIPTION_FIELD_DESC);
          oprot.writeString(this.notebookDescription);
          oprot.writeFieldEnd();
        }
      }
      if (isSetPrivilege()) {
        oprot.writeFieldBegin(PRIVILEGE_FIELD_DESC);
        oprot.writeI32(this.privilege);
        oprot.writeFieldEnd();
      }
      if (isSetRecommended()) {
        oprot.writeFieldBegin(RECOMMENDED_FIELD_DESC);
        oprot.writeBool(this.recommended);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("BusinessNotebook(");
      var first:Boolean = true;

      if (isSetNotebookDescription()) {
        ret += "notebookDescription:";
        if (this.notebookDescription == null) {
          ret += "null";
        } else {
          ret += this.notebookDescription;
        }
        first = false;
      }
      if (isSetPrivilege()) {
        if (!first) ret +=  ", ";
        ret += "privilege:";
        var privilege_name:String = SharedNotebookPrivilegeLevel.VALUES_TO_NAMES[this.privilege];
        if (privilege_name != null) {
          ret += privilege_name;
          ret += " (";
        }
        ret += this.privilege;
        if (privilege_name != null) {
          ret += ")";
        }
        first = false;
      }
      if (isSetRecommended()) {
        if (!first) ret +=  ", ";
        ret += "recommended:";
        ret += this.recommended;
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
      if (isSetPrivilege() && !SharedNotebookPrivilegeLevel.VALID_VALUES.contains(privilege)){
        throw new TProtocolError(TProtocolError.UNKNOWN, "The field 'privilege' has been assigned the invalid value " + privilege);
      }
    }

  }

}
