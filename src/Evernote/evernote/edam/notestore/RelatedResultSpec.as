/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  /**
   * A description of the thing for which the service will find related
   * entities, via findRelated(), together with a description of what
   * type of entities and how many you are seeking in the
   * RelatednessResult.
   * 
   * <dl>
   * <dt>maxNotes</dt>
   * <dd>Return notes that are related to the query, but no more than
   *     this many.  Any value greater than EDAM_RELATED_MAX_NOTES
   *     will be silently capped.  If you do not set this field, then
   *     no notes will be returned.</dd>
   * 
   * <dt>maxNotebooks</dt>
   * <dd>Return notebooks that are related to the query, but no more than
   *     this many.  Any value greater than EDAM_RELATED_MAX_NOTEBOOKS
   *     will be silently capped.  If you do not set this field, then
   *     no notebooks will be returned.</dd>
   * 
   * <dt>maxTags</dt>
   * <dd>Return tags that are related to the query, but no more than
   *     this many.  Any value greater than EDAM_RELATED_MAX_TAGS
   *     will be silently capped.  If you do not set this field, then
   *     no tags will be returned.</dd>
   * </dl>
   */
  public class RelatedResultSpec implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("RelatedResultSpec");
    private static const MAX_NOTES_FIELD_DESC:TField = new TField("maxNotes", TType.I32, 1);
    private static const MAX_NOTEBOOKS_FIELD_DESC:TField = new TField("maxNotebooks", TType.I32, 2);
    private static const MAX_TAGS_FIELD_DESC:TField = new TField("maxTags", TType.I32, 3);

    private var _maxNotes:int;
    public static const MAXNOTES:int = 1;
    private var _maxNotebooks:int;
    public static const MAXNOTEBOOKS:int = 2;
    private var _maxTags:int;
    public static const MAXTAGS:int = 3;

    private var __isset_maxNotes:Boolean = false;
    private var __isset_maxNotebooks:Boolean = false;
    private var __isset_maxTags:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[MAXNOTES] = new FieldMetaData("maxNotes", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[MAXNOTEBOOKS] = new FieldMetaData("maxNotebooks", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[MAXTAGS] = new FieldMetaData("maxTags", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(RelatedResultSpec, metaDataMap);
    }

    public function RelatedResultSpec() {
    }

    public function get maxNotes():int {
      return this._maxNotes;
    }

    public function set maxNotes(maxNotes:int):void {
      this._maxNotes = maxNotes;
      this.__isset_maxNotes = true;
    }

    public function unsetMaxNotes():void {
      this.__isset_maxNotes = false;
    }

    // Returns true if field maxNotes is set (has been assigned a value) and false otherwise
    public function isSetMaxNotes():Boolean {
      return this.__isset_maxNotes;
    }

    public function get maxNotebooks():int {
      return this._maxNotebooks;
    }

    public function set maxNotebooks(maxNotebooks:int):void {
      this._maxNotebooks = maxNotebooks;
      this.__isset_maxNotebooks = true;
    }

    public function unsetMaxNotebooks():void {
      this.__isset_maxNotebooks = false;
    }

    // Returns true if field maxNotebooks is set (has been assigned a value) and false otherwise
    public function isSetMaxNotebooks():Boolean {
      return this.__isset_maxNotebooks;
    }

    public function get maxTags():int {
      return this._maxTags;
    }

    public function set maxTags(maxTags:int):void {
      this._maxTags = maxTags;
      this.__isset_maxTags = true;
    }

    public function unsetMaxTags():void {
      this.__isset_maxTags = false;
    }

    // Returns true if field maxTags is set (has been assigned a value) and false otherwise
    public function isSetMaxTags():Boolean {
      return this.__isset_maxTags;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case MAXNOTES:
        if (value == null) {
          unsetMaxNotes();
        } else {
          this.maxNotes = value;
        }
        break;

      case MAXNOTEBOOKS:
        if (value == null) {
          unsetMaxNotebooks();
        } else {
          this.maxNotebooks = value;
        }
        break;

      case MAXTAGS:
        if (value == null) {
          unsetMaxTags();
        } else {
          this.maxTags = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case MAXNOTES:
        return this.maxNotes;
      case MAXNOTEBOOKS:
        return this.maxNotebooks;
      case MAXTAGS:
        return this.maxTags;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case MAXNOTES:
        return isSetMaxNotes();
      case MAXNOTEBOOKS:
        return isSetMaxNotebooks();
      case MAXTAGS:
        return isSetMaxTags();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MAXNOTES:
            if (field.type == TType.I32) {
              this.maxNotes = iprot.readI32();
              this.__isset_maxNotes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAXNOTEBOOKS:
            if (field.type == TType.I32) {
              this.maxNotebooks = iprot.readI32();
              this.__isset_maxNotebooks = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAXTAGS:
            if (field.type == TType.I32) {
              this.maxTags = iprot.readI32();
              this.__isset_maxTags = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (isSetMaxNotes()) {
        oprot.writeFieldBegin(MAX_NOTES_FIELD_DESC);
        oprot.writeI32(this.maxNotes);
        oprot.writeFieldEnd();
      }
      if (isSetMaxNotebooks()) {
        oprot.writeFieldBegin(MAX_NOTEBOOKS_FIELD_DESC);
        oprot.writeI32(this.maxNotebooks);
        oprot.writeFieldEnd();
      }
      if (isSetMaxTags()) {
        oprot.writeFieldBegin(MAX_TAGS_FIELD_DESC);
        oprot.writeI32(this.maxTags);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("RelatedResultSpec(");
      var first:Boolean = true;

      if (isSetMaxNotes()) {
        ret += "maxNotes:";
        ret += this.maxNotes;
        first = false;
      }
      if (isSetMaxNotebooks()) {
        if (!first) ret +=  ", ";
        ret += "maxNotebooks:";
        ret += this.maxNotebooks;
        first = false;
      }
      if (isSetMaxTags()) {
        if (!first) ret +=  ", ";
        ret += "maxTags:";
        ret += this.maxTags;
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
